name: ActionChecker
on:
  push:
    branches: #[ master ]
      - "[Ff]eature-*" 
    paths:
      - '**.md'
  pull_request:
    branches: [ QA ]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  ActionChecker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4
      with:
        fetch-depth: "0"
    
    - name: '' #get changed files
      id: getfileCount
      run: |
        echo "name=filesCount::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} -- '*.md'| wc -l)" >>GITHUB_STATE
    
    - name: '' #get changed files
      id: getfile
      run: |
        echo "name=files::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} -- '*.md' | xargs)" >>GITHUB_STATE
        
    - name: '' #get changed fileName
      if: ${{ steps.getfileCount.outputs.filesCount  == 1}}
      id: getfileName
      run: |
        echo "name=fileName::$(basename -a ${{ steps.getfile.outputs.files }})" >>GITHUB_STATE
    
    - name: '' #get changed fileName Only
      if: ${{ steps.getfileCount.outputs.filesCount  == 1}}
      id: getfileNameOnly
      run: |
        echo "name=fileNameOnly::$(echo ${{ steps.getfileName.outputs.fileName }} | cut -f 1 -d '.')" >>GITHUB_STATE
    
    - name: '' #get changed files
      id: getDirName
      run: |
        echo "name=dirs::$(dirname ${{ steps.getfile.outputs.files }})" >>GITHUB_STATE
    
    #- name: echo output
      #run: |
        #echo ${{ steps.getfile.outputs.files }}
        #echo ${{ steps.getfileName.outputs.fileName }}
        #echo ${{ steps.getfileNameOnly.outputs.fileNameOnly }}
        #echo ${{ steps.getDirName.outputs.dirs }}
    
   
    - name: Spell Checker
      if: always()  
      uses: zwaldowski/cspell-action@v1
      with:
        # Glob pattern of files to check
        paths: ${{ steps.getfile.outputs.files }}
        config: .github/workflows/cspell.json
        # Configuration file to use. By default cspell looks for cspell.json in the current directory.
        #config: # optional
        # Exclude files matching the glob pattern
        #exclude: # optional
        # Only output the first instance of a word not found in the dictionaries.
        #unique: # optional
      
    - name: Markdown Link Checker
      if: always()  
      uses: ruzickap/action-my-markdown-link-checker@v1
      with:
        # markdown-link-check config file
        #config_file: # optional
        # Debug mode
        #debug: # optional
        # Exclude files or directories
        #exclude: # optional
        # Command line parameters for fd command. "exclude" and "search_paths" parameters are ignored if this is set
        #fd_cmd_params: # optional
        # Quiet mode for markdown-link-check
        #quiet: # optional
        # Set paths which should be recursively scanned for markdown files (*.md) and linted. By default all "*.md" files are checked
        search_paths: ${{ steps.getDirName.outputs.dirs }} # optional
        # Verbose mode for markdown-link-check
        #verbose: # optional

#This portion of code will execute if a single markdown file within a folder is changed.  If no markdown file is changed, or more than one file is changed, then the entire directory will be checked.
    - name: Markdown Linter for Changed File Scan 
      if: ${{ always() && steps.getfileCount.outputs.filesCount == 1}}   
      uses: ruzickap/action-my-markdown-linter@v1
      with:
        # markdownlint config file
        config_file: .github/workflows/markdownlint.json # optional
        # Debug mode
        #debug: # optional
        # Exclude files or directories
        #exclude: # optional
        # Command line parameters for fd command. "exclude" and "search_paths" parameters are ignored if this is set
        fd_cmd_params: "-0 --extension md ${{ steps.getfileNameOnly.outputs.fileNameOnly }} --type f --hidden --no-ignore --full-path ${{ steps.getDirName.outputs.dirs }}" # optional
        # Set paths which should be recursively scanned for markdown files (*.md) and linted. By default all "*.md" files are checked
        #search_paths: ${{ steps.getDirName.outputs.dirs }} # optional
    
#This portion of code will execute if no markdown files, or more than one markdown file is changed and will check the entire directory.
    - name: Markdown Linter for Directory Level Scan
      if: ${{ always() && steps.getfileCount.outputs.filesCount != 1}}   
      uses: ruzickap/action-my-markdown-linter@v0.0.1
      with:
        # markdownlint config file
        config_file: .github/workflows/markdownlint.json # optional
        # Debug mode
        #debug: # optional
        # Exclude files or directories
        #exclude: # optional
        # Command line parameters for fd command. "exclude" and "search_paths" parameters are ignored if this is set
        #fd_cmd_params: "-0 --extension md ${{ steps.getfileNameOnly.outputs.fileNameOnly }} --type f --hidden --no-ignore --full-path ${{ steps.getDirName.outputs.dirs }}" # optional
        # Set paths which should be recursively scanned for markdown files (*.md) and linted. By default all "*.md" files are checked
        search_paths: ${{ steps.getDirName.outputs.dirs }} # optional
   
          
    - name: GitHub Pull Request Action
      if: always()  
      uses: repo-sync/pull-request@v2.12.1
      with:
        # Branch name to pull from, default is triggered branch
        #source_branch: 'Feature' # optional
        # Branch name to sync to in this repo, default is master
        destination_branch: 'QA' # optional, default is master
        # Pull request title
        #pr_title: # optional
        # Pull request body
        #pr_body: # optional
        # Pull request template
        #pr_template: # optional
        # Pull request reviewers, comma-separated list (no spaces)
        pr_reviewer: 'lijenn,branscombj,dlkibbe,jamesmrollins' # optional
        # Pull request assignees, comma-separated list (no spaces)
        #pr_assignee: # optional
        # Pull request labels, comma-separated list (no spaces)
        #pr_label: # optional
        # Pull request milestone
        #pr_milestone: # optional
        # Draft pull request
        #pr_draft: # optional
        # Create PR even if no changes
        #pr_allow_empty: # optional
        # GitHub token secret
        github_token: ${{ secrets.GITHUB_TOKEN }}
